function compareElegant(ss1, ss2)%, mode)

doIt(ss1, ss2, @showMol2);

% if ss.legs(1).atp>ss.legs(2).atp
%   a = 1;
%   b = 2;
% else
%   a = 2;
%   b = 1;
% end
% 
% ss = removeSprings(ss, ss.legs(a).atpb(:));
% ss = removeSprings(ss, ss.legs(b).atpb(:));
% ss =  removePoints(ss, ss.legs(a).atp);
% ss =  removePoints(ss, ss.legs(b).atp);
% ss = rmfield(ss, 'legs');
% 
% doIt(ss, @showMol);
% doIt(ss, @showThirdEigenVector);


function doIt(ss1, ss2, fun)

figure;

hold on;

fun(ss1, ss2);

%light('Position',[0 1000 0],'Style','infinite');

axis equal;
view(180,0);
set(gca, 'CameraUpVector',  get(gca, 'CameraUpVector')  * (-1) );
%set(gca, 'CameraViewAngle', get(gca, 'CameraViewAngle') * 0.4  );
set(gcf, 'Color', [1 1 1]);
axis off;
cameratoolbar(gcf, 'Show');

function showMol2(ss1, ss2)
    [zX zY] = meshgrid(0:0.1:10*2*pi); 
    
    img1=((sin(zX)+1)/2);
    img1 = repmat(img1, [1, 1, 3]);
    img2=((sin(zY)+1)/2);
    img2 = repmat(img2, [1, 1, 3]);

    ns = 200;%40;
    rs = 3.8/2;

    nc = 20;
    rc = 0.3;
    
    
%     cs   = 0.35;
%     cc   = 0.45;
%     toe  = 0.8;
%     atpV = 0.05;
%     atpE = 0.05;
    
    cs = 0.3;
    cc = 0.3;
    toe  = 0;
    atpV = 0;
    atpE = 0;
    
    args_s = {...
      'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
      'SpecularStrength', 0, 'DiffuseStrength', 1, ...
      'AmbientStrength', 1, 'FaceColor', cs*ones(3,1), ...
      };
    args_c = {...
      'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
      'SpecularStrength', 0, 'DiffuseStrength', 1, ...
      'AmbientStrength', 1, 'FaceColor', cc*ones(3,1), ...
      };
    args_T = {...
      'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
      'SpecularStrength', 0, 'DiffuseStrength', 1, ...
      'AmbientStrength', 1, 'FaceColor', toe*ones(3,1), ...
      };
    args_V = {...
      'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
      'SpecularStrength', 0, 'DiffuseStrength', 1, ...
      'AmbientStrength', 1, 'FaceColor', atpV*ones(3,1), ...
      };
    args_E = {...
      'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
      'SpecularStrength', 0, 'DiffuseStrength', 1, ...
      'AmbientStrength', 1, 'FaceColor', atpE*ones(3,1), ...
      };
%     alpha = 0.2;
%     
%     args_s = {...
%       'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
%       'SpecularStrength', 0, 'DiffuseStrength', 1, ...
%       ...%'AmbientStrength', 1, 'FaceAlpha', alpha, 'FaceColor', 'texturemap', 'CData', img2, ...%'FaceColor', cs*ones(3,1), ...
%       'AmbientStrength', 1, 'FaceAlpha', alpha, 'FaceColor', cs*ones(3,1), ...
%       };
%     args_c = {...
%       'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
%       'SpecularStrength', 0, 'DiffuseStrength', 1, ...
%       ...%'AmbientStrength', 1, 'FaceAlpha', alpha, 'FaceColor', 'texturemap', 'CData', img2, ...%'FaceColor', cc*ones(3,1), ...
%       'AmbientStrength', 1, 'FaceAlpha', alpha, 'FaceColor', cc*ones(3,1), ...
%       };
%     args_T = {...
%       'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
%       'SpecularStrength', 0, 'DiffuseStrength', 1, ...
%       ...%'AmbientStrength', 1, 'FaceAlpha', alpha, 'FaceColor', 'texturemap', 'CData', img2, ...%'FaceColor', toe*ones(3,1), ...
%       'AmbientStrength', 1, 'FaceAlpha', alpha, 'FaceColor', toe*ones(3,1), ...
%       };
%     args_V = {...
%       'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
%       'SpecularStrength', 0, 'DiffuseStrength', 1, ...
%       ...%'AmbientStrength', 1, 'FaceAlpha', alpha, 'FaceColor', 'texturemap', 'CData', img2, ...%'FaceColor', atpV*ones(3,1), ...
%       'AmbientStrength', 1, 'FaceAlpha', alpha, 'FaceColor', atpV*ones(3,1), ...
%       };
%     args_E = {...
%       'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
%       'SpecularStrength', 0, 'DiffuseStrength', 1, ...
%       ...%'AmbientStrength', 1, 'FaceAlpha', alpha, 'FaceColor', 'texturemap', 'CData', img2, ...%'FaceColor', atpE*ones(3,1), ...
%       'AmbientStrength', 1, 'FaceAlpha', alpha, 'FaceColor', atpE*ones(3,1), ...
%       };
    
    showMol(ss2, ns, rs, args_s, nc, rc, args_c, args_T, args_V, args_E);
    
    cs = 0.6;
    cc = 0.6;
    toe  = cs*2;
    atpV = 0;
    atpE = 0;

    
    args_s = {...
      'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
      'SpecularStrength', 0, 'DiffuseStrength', 1, ...
      'AmbientStrength', 1, 'FaceColor', cs*ones(3,1), ...
      };
    args_c = {...
      'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
      'SpecularStrength', 0, 'DiffuseStrength', 1, ...
      'AmbientStrength', 1, 'FaceColor', cc*ones(3,1), ...
      };
    args_T = {...
      'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
      'SpecularStrength', 0, 'DiffuseStrength', 1, ...
      'AmbientStrength', 1, 'FaceColor', toe*ones(3,1), ...
      };
    args_V = {...
      'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
      'SpecularStrength', 0, 'DiffuseStrength', 1, ...
      'AmbientStrength', 1, 'FaceColor', atpV*ones(3,1), ...
      };
    args_E = {...
      'EdgeColor', 'none', 'FaceLighting', 'gouraud', ...
      'SpecularStrength', 0, 'DiffuseStrength', 1, ...
      'AmbientStrength', 1, 'FaceColor', atpE*ones(3,1), ...
      };
    
    showMol(ss1, ns, rs, args_s, nc, rc, args_c, args_T, args_V, args_E);


function showMol(ss, ns, rs, args_s, nc, rc, args_c, args_T, args_V, args_E)

md = false;

[X,Y,Z] = sphere(ns);

if md
  X=-X;
  Y=-Y;
  Z=-Z;
end

[F,V]   = surf2patch(X,Y,Z);

vertices = cell(size(ss.pos,1),1);

for k=1:size(ss.pos,1)
  s = surf(X*rs+ss.pos(k,1),Y*rs+ss.pos(k,2),Z*rs+ss.pos(k,3));
  set(s, args_s{:});
  vertices{k} = s;
end

links = cell(size(ss.springEnds,1),1);

for k=1:size(ss.springEnds)
  es = ss.springEnds(k,:);
  [X,Y,Z]=cylinder2P(rc,nc,ss.pos(es(1),:), ss.pos(es(2),:));
  c = surf(X,Y,Z);
  set(c, args_c{:});
  links{k} = c;
end

if isfield(ss, 'legs')
  for k=1:numel(ss.legs)
    for z=1:numel(ss.legs(k).toes)
      t = ss.legs(k).toes(z);
      set(vertices{t}, args_T{:});
    end
    for z=1:numel(ss.legs(k).atp)
      set(vertices{ss.legs(k).atp(z)}, args_V{:});
    end
    for z=1:numel(ss.legs(k).atpb)
      set(links{ss.legs(k).atpb(z)}, args_E{:});
    end
  end
end

